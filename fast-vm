#!/bin/bash

if [ "$(whoami)" != "root" ]; then
	echo "[err] this must be run as root"
	exit 1
fi

function check_empty {
	var_name="$1"
	var_value="$2"
	if [ -z "$var_value" ]; then
		echo "[err] variable $var_name not declared in configuration"
		echo "      consider running setup.sh again or fix manually"
		exit 2
	fi
}

function usage {
	part="$1"

	echo ''
	case $part in
		import_image)
			echo "fast-vm import_image <rhel_version> <image.gz> <libvirt.xml> [ <hack_file.sh> ]"
			echo "  <rhel_version> - number for imported rhel version (f.e. 6_7)"
			echo "  <image.gz> - gziped VM drive to be imported"
			echo "  <libvirt.xml> - default libvirt VM xml definition for this version"
			echo "  <hack_file.sh> (optional) - bash script executed after creating VM "
			echo "                              (f.e. used for change of hostname)"
			;;
		create)
			echo "fast-vm create <rhel_version> <VM_number>/base [ <libvirt.xml> ] [ <hack_file.sh> ]"
			echo "  <rhel_version> - version of rhel to use for this VM (new ones can be defined using import_image)"
			echo "  <VM_number>/base - number of VM which you use to identify the VM, the VM also gets assigned"
			echo "                   static DHCP lease in form of 192.168.XX.<VM_number>."
			echo " 		         - alternatively special value 'base' denotas creation of base VM"
			echo "  <libvirt.xml> (optional) - alternative libvirt VM xml definition for this VM"
			echo "  <hack_file.sh> (optional) - alternative bash script executed after creating VM "
			;;
		start)
			echo "fast-vm start <VM_number> [ console ]"
			echo "  <VM_number> - number of VM to start"
			echo "  console (optional) - if present you get connected to VMs serial console after starting it"
			;;
		console)
			echo "fast-vm console <VM_number>"
			echo "  <VM_number> - number of VM to start"
			;;
		delete)
			echo "fast-vm delete <VM_number>"
			echo "  <VM_number> - number of VM to start"
			;;
		*)
			echo "fast-vm <action> <options>"
			echo "  <action> :"
			echo "    import_image - import VM image to thin LVM storage and define default libvirt XML "
			echo " 	                 and optionaly hacks file"
			echo "    create - creates VM based on image from thin LVM"
			echo "    start - starts VM and optionally also connects to serial console after start"
			echo "    console - connect to serial console of running VM"
			echo "    delete - delete VM and its thin LV disk drive"
			echo " for more details run 'fast-vm <action>' without options to see more help"
			echo "== fast-vm version 0.1 <ofamera@redhat.com> =="
			;;
	esac
	exit 1
}

# first parameter is compulsory
if [ -z "$1" ]; then usage; fi

## fast-vm configuration
if [ ! -f "$HOME/.fast-vm/config" ]; then
	echo "[err] no configuration found in ~/.fast-vm/config"
	echo "      please run setup.sh before using fast-vm"
	exit 1
fi

# load and verify configuration
. ~/.fast-vm/config

check_empty "VM_PREFIX" "$VM_PREFIX"
check_empty "LIBVIRT_NETWORK" "$LIBVIRT_NETWORK"
check_empty "THINPOOL_VG" "$THINPOOL_VG"
check_empty "THINPOOL_LV" "$THINPOOL_LV"
check_empty "SUBNET_NUMBER" "$SUBNET_NUMBER"

case "$1" in
	import_image)
		rhel_version="$2"
		if [ -z "$rhel_version" ]; then echo "[err] missing rhel version"; usage import_image; fi
		image_path="$3"
		if [ ! -f "$image_path" ]; then echo "[err] image file not found"; usage import_image; fi
		image_xml_path="$4"
		if [ ! -f "$image_xml_path" ]; then echo "[err] image xml file not found"; usage import_image; fi

		hack_file="$5"
		if [ ! -z "$hack_file" ] && [ ! -f "$hack_file" ]; then
			echo "[err] hack file not found"
			usage import_image
		fi

		if [ -b "/dev/$THINPOOL_VG/$VM_PREFIX$rhel_version" ]; then
			echo "[wrn] base image for '$rhel_version' version already exists"
			echo "[???] Do you want to overwrite it (y/n): "
			read answer
			if [ ! "$answer" == "y" ]; then
				echo "[inf] aborting, no changes made"
				exit 0
			fi
			echo "[inf] stopping and undefining the bas VM"
			virsh destroy $VM_PREFIX$rhel_version
			virsh undefine $VM_PREFIX$rhel_version
			echo "[inf] overwriting LV $VM_PREFIX$rhel_version ..."
		else
			echo "[inf] creating LV $VM_PREFIX$rhel_version ..."
			lvcreate -n $VM_PREFIX$rhel_version -V 10G --thinpool $THINPOOL_VG/$THINPOOL_LV
			if [ "$?" != "0" ]; then
				echo "[err] Error creating thin LV for VM image"
				exit 1
			fi
		fi

		echo "[inf] importing image $image_path into /dev/$THINPOOL_VG/$VM_PREFIX$rhel_version"
		which pv >/dev/null 2>&1 
		if [ "$?" -eq '0' ]; then
			gunzip -c "$image_path"| pv | dd of=/dev/$THINPOOL_VG/$VM_PREFIX$rhel_version bs=1M conv=sparse
		else
			echo "[inf] please wait while importing image (to show progress, install 'pv')"
			gunzip -c "$image_path"| dd of=/dev/$THINPOOL_VG/$VM_PREFIX$rhel_version bs=1M conv=sparse
		fi
		if [ "$?" != "0" ]; then
			echo "[err] Error copying the image into thin LV"
			exit 1
		fi

		# copy the XML configuration file
		if [ ! -d "$HOME/.fast-vm" ]; then 
			mkdir "$HOME/.fast-vm"
		fi
		cp "$image_xml_path" "$HOME/.fast-vm/config-${rhel_version}.xml"
		if [ ! -z "$hack_file" ] && [ -f "$hack_file" ]; then
			cp "$hack_file" "$HOME/.fast-vm/hacks-${rhel_version}.sh"
			chmod +x "$HOME/.fast-vm/hacks-${rhel_version}.sh"
		fi

		echo "[inf] image imported"
		;;
	create)
		rhel_version="$2"
		if [ -z "$rhel_version" ]; then echo "[err] missing rhel version"; usage create; fi

		image_xml_path="$4"
		if [ ! -z "$image_xml_path" ]; then
			if [ ! -f "$image_xml_path" ]; then
				echo "[err] image xml file not found"
				usage create
			else
				echo "[inf] using alternative xml file $image_xml_path"
			fi
		else
			if [ ! -f "$HOME/.fast-vm/config-${rhel_version}.xml" ]; then
				echo "[err] no VM XML definition for this version, "
				echo "      $HOME/.fast-vm/config-${rhel_version}.xml not found."
				echo "      Import image again or supply alternative xml"
				usage create
			else
				image_xml_path="$HOME/.fast-vm/config-${rhel_version}.xml"
			fi
		fi

		hack_file="$5"
		if [ ! -z "$hack_file" ]; then
			if [ ! -f "$hack_file" ]; then
				echo "[err] hack file not found"
				usage create
			else
				echo "[inf] using alternative hack file $hack_file"
			fi
		else
			if [ ! -f "$HOME/.fast-vm/hacks-${rhel_version}.sh" ]; then
				echo "[wrn] no default hacks file for this version, "
				echo "      $HOME/.fast-vm/hacks-${rhel_version}.sh not found"
			else
				hack_file="$HOME/.fast-vm/hacks-${rhel_version}.sh"
			fi
		fi

		if [ ! -b "/dev/$THINPOOL_VG/$VM_PREFIX$rhel_version" ]; then
			echo "[err] Missing image for this rhel version"
			echo "      /dev/$THINPOOL_VG/$VM_PREFIX$rhel_version not found"
			echo "      first import image using 'fast-vm image_import $rhel_version'"
			exit 2
		fi

		vm_number="$3"
		# validate VM NUMBER
		if [[ $vm_number =~ ^-?[0-9]+$ ]]
		then
			if [ "$vm_number" -lt 20 ] || [ "$vm_number" -gt 220 ];then
				echo "[err] VM number out of range (20-220)"
				usage create
			fi
		else
			if [ "$vm_number" == "base" ]; then
				echo "[inf] creating base image VM"
			else
				echo "[err] only numbers from range 20-220 and word 'base' permited here"
				usage create
			fi
		fi


		# special case for creating only base image
		if [ "$vm_number" == "base" ]; then
			VM_NAME="$VM_PREFIX$rhel_version"
			
			tmp_xml=$(mktemp --suffix=.xml)
			sed -e "s/VM_NAME/$VM_PREFIX$rhel_version/g; s/VG_NAME/$THINPOOL_VG/g; s/NET_NAME/$LIBVIRT_NETWORK/g;" "$image_xml_path" > $tmp_xml
			virsh define $tmp_xml
			if [ ! "$?" -eq '0' ]; then
				echo "[err] defining base VM failed, doesn't exists alreadry?"
				exit 2
			fi

			# source file with hacks and apply them
			if [ -f "$hack_file" ]; then
				echo "[info] applying hacks from $hack_file"
				. $hack_file
			fi

			echo "[inf] base image VM created, to start this VM use 'virsh start $VM_PREFIX$rhel_version'"
			echo "      This VM is used for customizing the base image of '$rhel_version' VMs"
			echo "      All changes you make to this VM would be available in newly created VMs"
			echo "      of that version, this will not affect already existing VMs of same version"
			exit 0
		fi
		
		## check if the machine doesn't exists already
		if [ -b "/dev/$THINPOOL_VG/$VM_PREFIX$rhel_version-$vm_number" ]; then
			echo "[err] there is already disk for this machine, VM creation aborted"
			exit 1
		fi

		## create regular machine
		VM_NAME="$VM_PREFIX$rhel_version-$vm_number"

		echo "[inf] creating disk '$VM_PREFIX$rhel_version-$vm_number'"
		lvcreate -k n -s --thinpool $THINPOOL_VG/$THINPOOL_LV /dev/$THINPOOL_VG/$VM_PREFIX$rhel_version --name $VM_PREFIX$rhel_version-$vm_number
		echo "[inf] defining virtual machine '$VM_PREFIX$rhel_version-$vm_number' in libvirt"

		tmp_xml=$(mktemp --suffix=.xml)
		sed -e "s/VM_NAME/$VM_PREFIX$rhel_version-$vm_number/g; s/VG_NAME/$THINPOOL_VG/g; s/NET_NAME/$LIBVIRT_NETWORK/g;" "$image_xml_path" > $tmp_xml
		virsh define $tmp_xml

		echo "[inf] adding static lease for 192.168.$SUBNET_NUMBER.$vm_number into libvirts DHCP"
		vm_mac=$(virsh dumpxml "$VM_PREFIX$rhel_version-$vm_number"|grep 'mac address'|cut -d\' -f 2)
		virsh net-update "$LIBVIRT_NETWORK" add-last ip-dhcp-host --xml "<host mac='$vm_mac' ip='192.168.$SUBNET_NUMBER.$vm_number'/>" --live --config

		# source file with hacks and apply them
		if [ -f "$hack_file" ]; then
			echo "[info] applying hacks from $hack_file"
			. $hack_file
		fi

		echo "[inf] VM '$VM_NAME' created"
		;;

	start)
		vm_number="$2"
		if [ -z "$vm_number" ]; then echo "[err] VM number missing"; usage start; fi
		
		vm_name=$(virsh list --all |grep "$VM_PREFIX"|awk '{print $2}'|egrep "\-$vm_number$")

		if [ -z "$vm_name" ]; then
			echo "[err] VM with number '$vm_number' not found"
			exit 1
		fi
		
		# if there is any third argument start VM and console after
		echo "[inf] starting VM $vm_name"
		if [ -z "$3" ]; then
			virsh start $vm_name
		else
			echo "      and connecting to it serial console ..."
			virsh start $vm_name && virsh console $vm_name
		fi
		;;
	console)
		vm_number="$2"
		if [ -z "$vm_number" ]; then echo "[err] VM number missing"; usage console; fi

		vm_name=$(virsh list --all |grep "$VM_PREFIX"|awk '{print $2}'|egrep "\-$vm_number$")
		if [ -z "$vm_name" ]; then
			echo "[err] VM with number '$vm_number' not found"
			exit 1
		fi

		virsh console $vm_name
		;;
	delete)
		vm_number="$2"
		if [ -z "$vm_number" ]; then echo "[err] VM number missing"; usage delete; fi

		vm_name=$(virsh list --all |grep "$VM_PREFIX"|awk '{print $2}'|egrep "\-$vm_number$")
		if [ -z "$vm_name" ]; then
			echo "[err] VM with number '$vm_number' not found"
			exit 1
		fi

		virsh destroy $vm_name

		echo "[info] reservating DHCP lease delete"
		vm_mac=$(virsh dumpxml "$vm_name"|grep 'mac address'|cut -d\' -f 2)

		echo "[inf] removing DHCP reservation"
		virsh net-update "$LIBVIRT_NETWORK" delete ip-dhcp-host --xml "<host mac='$vm_mac' ip='192.168.$SUBNET_NUMBER.$vm_number'/>" --live --config
		which dhcp_release >/dev/null 2>&1
		if [ "$?" -eq '0' ]; then
			dhcp_release "$LIBVIRT_NETWORK" "192.168.$SUBNET_NUMBER.$vm_number" "$vm_mac"
		else
			echo "[wrn] dhcp_release not found, to reause the same VM number you would need"
			echo "      need to delete DHCP leases file for $LIBVIRT_NETWORK network and"
			echo "      restart this network in the libvirt"
			echo "      http://lists.thekelleys.org.uk/pipermail/dnsmasq-discuss/2007q1/001094.html"
		fi
		
		echo "[inf] removing VM drive"
		lvremove -f /dev/$THINPOOL_VG/$vm_name

		echo "[inf] undefining VM from libvirt"
		virsh undefine $vm_name

		echo "[inf] VM '$vm_name' deleted"
		;;
	*) 
		echo "[err] unknown action"
		usage
		;;
esac	
