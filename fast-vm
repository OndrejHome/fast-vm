#!/bin/bash
DEBUG_LOG=/tmp/fast-vm.debug.log
FASTVM_HELPER=/usr/libexec/fast-vm-helper.sh

if [ $(id |grep '(libvirt)'|wc -l) -eq 0 ] && [ $(whoami) != "root" ]; then
	echo "[err] User running fast-vm must be member of group 'libvirt'."
	echo "You can easily add user to libvirt group using command below"
	echo "  # usermod -a -G libvirt <user>"
	exit 1
fi

function check_empty {
	var_name="$1"
	var_value="$2"
	if [ -z "$var_value" ]; then
                echo "[err] variable $var_name not declared in global configuration"
                echo "      run configure-fast-vm again or fix manually"
		exit 2
	fi
}

function usage {
	part="$1"

	echo ''
	case $part in
		import_image)
			echo "fast-vm import_image <image_name> <image.gz> <libvirt.xml> [ <hack_file.sh> ]"
			echo "  <image_name> - name of imported image (f.e. rhel-6.2)"
			echo "  <image.gz> - gziped VM drive to be imported"
			echo "  <libvirt.xml> - default libvirt VM xml definition for this version"
			echo "  <hack_file.sh> (optional) - bash script executed after creating VM "
			echo "                              (f.e. used for change of hostname)"
			;;
		remove_image)
			echo "fast-vm remove_image <image_name>"
			echo "  <image_name> - name of imported image (f.e. rhel-6.2)"
			;;
		create)
			echo "fast-vm create <image_name> <VM_number>/base [ <libvirt.xml> ] [ <hack_file.sh> ]"
			echo "  <image_name> - name of imported imaged to use for this VM (new ones can be defined using import_image)"
			echo "  <VM_number>/base - number of VM which you use to identify the VM, the VM also gets assigned"
			echo "                   static DHCP lease in form of 192.168.XX.<VM_number>."
			echo " 		         - alternatively special value 'base' denotas creation of base VM"
			echo "  <libvirt.xml> (optional) - alternative libvirt VM xml definition for this VM"
			echo "  <hack_file.sh> (optional) - alternative bash script executed after creating VM "
			;;
		start)
			echo "fast-vm start <VM_number> [ console|ssh  /path/to/custom_cmd]"
			echo "  <VM_number> - number of VM to start"
			echo "  console (optional) - connect to serial console after starting VM"
			echo "  ssh (optional) - connect to VM through SSH as soon as VM is ready"
			echo "  /path/to/custom_cmd - path to custom command to be executed instead of ssh after VM is reachable via SSH"
			;;
		console)
			echo "fast-vm console <VM_number>"
			echo "  <VM_number> - number of VM to connect to"
			;;
		ssh)
			echo "fast-vm ssh <VM_number> [/path/to/custom_cmd]"
			echo "  <VM_number> - number of VM to connect to"
			echo "  /path/to/custom_cmd - path to custom command to be executed instead of ssh after VM is reachable via SSH"
			;;
		delete)
			echo "fast-vm delete <VM_number>"
			echo "  <VM_number> - number of VM to start"
			;;
		list)
			echo "fast-vm list"
			echo "shows list of fast-vm VMs with their VM numbers and status"
			;;
		*)
			echo "fast-vm <action> <options>"
			echo "  <action> :"
			echo "    import_image - import VM image to thin LVM storage and define default libvirt XML "
			echo " 	                 and optionaly hacks file"
			echo "    remove_image - remove VM image from LVM storage, existing machines are NOT affected"
			echo "    create - creates VM based on image from thin LVM"
			echo "    start - starts VM and optionally also connects to serial console or SSH after start"
			echo "    console - connect to serial console of running VM"
			echo "    delete - delete VM and its thin LV disk drive"
			echo "    list - shows list of fast-vm VMs with their VM numbers and status"
			echo " for more details run 'fast-vm <action>' without options to see more help"
			echo "== fast-vm version 0.3 <ofamera@redhat.com> =="
			;;
	esac
	exit 1
}

function wait_for_ssh {
	vm_number="$1"
	echo "[inf] checking the 192.168.$SUBNET_NUMBER.$vm_number for active SSH connection"
	echo "      (ctrl+c to interrupt) "
	ssh_ready=$(ssh-keyscan -T 1 "192.168.$SUBNET_NUMBER.$vm_number" 2>/dev/null|egrep '(ssh-|ecdsa-)'|wc -l)
	while [ "$ssh_ready" -eq "0" ];
	do
		echo -n "."
		ssh_ready=$(ssh-keyscan -T 1 "192.168.$SUBNET_NUMBER.$vm_number" 2>/dev/null|egrep '(ssh-|ecdsa-)'|wc -l)
		sleep 1
	done
	echo
	echo "[inf] SSH ready"
}

# first parameter is compulsory
if [ -z "$1" ]; then usage; fi

## fast-vm configuration
if [ ! -f "/etc/fast-vm.conf" ]; then
	echo "[err] no global configuration found in /etc/fast-vm.conf"
	echo "      please run configure-fast-vm as root before using fast-vm"
	exit 1
fi

# load and verify configuration
. /etc/fast-vm.conf

check_empty "VM_PREFIX" "$VM_PREFIX"
check_empty "LIBVIRT_NETWORK" "$LIBVIRT_NETWORK"
check_empty "THINPOOL_VG" "$THINPOOL_VG"
check_empty "THINPOOL_LV" "$THINPOOL_LV"
check_empty "SUBNET_NUMBER" "$SUBNET_NUMBER"

## check if there is curl available so we can fetch images from http/https
which curl >/dev/null 2>&1
curl_ok="$?"
which pv >/dev/null 2>&1
pv_ok="$?"

case "$1" in
	import_image)
		image_name="$2"
		if [ -z "$image_name" ]; then echo "[err] missing image name"; usage import_image; fi
		image_path="$3"
		image_size="0"
		if [ "$curl_ok" -eq 0 ] && [ "${image_path:0:4}" == "http" ]; then
			if [ ! -f "$image_path" ]; then
				# curl, fetch size of image
				curl_data=$(curl --head "$3" 2>/dev/null)
				curl_httpok=$(echo "$curl_data"|grep "200 OK"|wc -l)
				if [ "$curl_httpok" -eq "1" ]; then
					image_size=$(echo "$curl_data"|grep "Content-Length:"|awk '{print $2}'|sed 's/[^0-9]*//g')
					echo "[info] Detected binary file with size $image_size"
				else
					echo "[err] error checking the file on the server, we got following information from server"
					echo "$curl_data"
					exit 2
				fi
			else
				echo "we have the file"
			fi
		else
			if [ ! -f "$image_path" ]; then
				echo "[err] image file not found"
				usage import_image
			fi
		fi

		image_extension="${image_path##*.}"
		case "$image_extension" in
			gz)
				decompress_cmd="gunzip -c"
				;;
			xz)
				decompress_cmd="xz -d -c"
				;;
			*)
				echo "[err] unknown image file extension $image_extension, (supported: xz, gz)"
				exit 1
				;;
		esac

		image_xml_path="$4"
		if [ ! -f "$image_xml_path" ]; then echo "[err] image xml file not found"; usage import_image; fi

		hack_file="$5"
		if [ ! -z "$hack_file" ] && [ ! -f "$hack_file" ]; then
			echo "[err] hack file not found"
			usage import_image
		fi

		if [ -b "/dev/$THINPOOL_VG/$VM_PREFIX$image_name" ]; then
			echo "[err] base image for '$image_name' version already exists"
			echo "      To remove image use 'remove_image' parameter"
			exit 1

		else
			echo "[inf] creating LV $VM_PREFIX$image_name ..."
			echo "lvcreate" "base" "$image_name" | sudo --non-interactive $FASTVM_HELPER
			if [ "$?" != "0" ]; then
				echo "[err] Error creating thin LV for VM image"
				exit 1
			fi
		fi

		echo "[inf] importing image $image_path into /dev/$THINPOOL_VG/$VM_PREFIX$image_name"
		echo "chgrp" "/dev/$THINPOOL_VG/$VM_PREFIX$image_name" | sudo --non-interactive $FASTVM_HELPER

		if [ "$image_size" -eq "0" ]; then
			# import from local file
			if [ "$pv_ok" -eq '0' ]; then
				$decompress_cmd "$image_path"| pv -s 10G | dd of=/dev/$THINPOOL_VG/$VM_PREFIX$image_name bs=1M conv=sparse >>$DEBUG_LOG 2>&1
				import_exit="$?"
			else
				echo "[inf] please wait while importing image (to show progress, install 'pv')"
				$decompress_cmd "$image_path"| dd of=/dev/$THINPOOL_VG/$VM_PREFIX$image_name bs=1M conv=sparse >>$DEBUG_LOG 2>&1
				import_exit="$?"
			fi
		else
			# import from http(s)
			if [ "$pv_ok" -eq '0' ]; then
				curl -s "$image_path" | pv -N download -c -s "$image_size" | $decompress_cmd | pv -N unpack -c -s 10737418240 | dd of=/dev/$THINPOOL_VG/$VM_PREFIX$image_name bs=1M conv=sparse >>$DEBUG_LOG 2>&1
				import_exit="$?"
			else
				echo "[inf] please wait while importing image (to show image write progress, install 'pv')"
				curl "$image_path" | $decompress_cmd | dd of=/dev/$THINPOOL_VG/$VM_PREFIX$image_name bs=1M conv=sparse 2>>$DEBUG_LOG
				import_exit="$?"
			fi

		fi
		if [ "$import_exit" != "0" ]; then
			echo "[err] Error copying the image into thin LV"
			exit 1
		fi

		# copy the XML configuration file
		if [ ! -d "$HOME/.fast-vm" ]; then 
			mkdir "$HOME/.fast-vm" >>$DEBUG_LOG 2>&1
		fi
		cp "$image_xml_path" "$HOME/.fast-vm/config-${image_name}.xml" >>$DEBUG_LOG 2>&1
		if [ ! -z "$hack_file" ] && [ -f "$hack_file" ]; then
			cp "$hack_file" "$HOME/.fast-vm/hacks-${image_name}.sh" >>$DEBUG_LOG 2>&1
			chmod +x "$HOME/.fast-vm/hacks-${image_name}.sh" >>$DEBUG_LOG 2>&1
		fi

		echo "[inf] image imported"
		;;
	remove_image)
		image_name="$2"
		if [ -z "$image_name" ]; then echo "[err] missing image name"; usage remove_image; fi

		if [ -b "/dev/$THINPOOL_VG/$VM_PREFIX$image_name" ]; then
			echo "[inf] stopping and undefining the base VM"
			virsh --connect qemu:///system destroy $VM_PREFIX$image_name >>$DEBUG_LOG 2>&1
			virsh --connect qemu:///system undefine $VM_PREFIX$image_name >>$DEBUG_LOG 2>&1
			echo "[inf] removing LV $VM_PREFIX$image_name ..."
			echo "lvremove" "/dev/$THINPOOL_VG/$VM_PREFIX$image_name" | sudo --non-interactive $FASTVM_HELPER
		else
			echo "[err] image "$image_name" not found"
			usage remove_image
		fi
		;;
	create)
		image_name="$2"
		if [ -z "$image_name" ]; then echo "[err] missing image name"; usage create; fi

		image_xml_path="$4"
		if [ ! -z "$image_xml_path" ]; then
			if [ ! -f "$image_xml_path" ]; then
				echo "[err] image xml file not found"
				usage create
			else
				echo "[inf] using alternative xml file $image_xml_path"
			fi
		else
			if [ ! -f "$HOME/.fast-vm/config-${image_name}.xml" ]; then
				echo "[err] no VM XML definition for this version, "
				echo "      $HOME/.fast-vm/config-${image_name}.xml not found."
				echo "      Import image again or supply alternative xml"
				usage create
			else
				image_xml_path="$HOME/.fast-vm/config-${image_name}.xml"
			fi
		fi

		hack_file="$5"
		if [ ! -z "$hack_file" ]; then
			if [ ! -f "$hack_file" ]; then
				echo "[err] hack file not found"
				usage create
			else
				echo "[inf] using alternative hack file $hack_file"
			fi
		else
			if [ ! -f "$HOME/.fast-vm/hacks-${image_name}.sh" ]; then
				echo "[wrn] no default hacks file for this version, "
				echo "      $HOME/.fast-vm/hacks-${image_name}.sh not found"
			else
				hack_file="$HOME/.fast-vm/hacks-${image_name}.sh"
			fi
		fi

		if [ ! -b "/dev/$THINPOOL_VG/$VM_PREFIX$image_name" ]; then
			echo "[err] Missing image for this image name"
			echo "      /dev/$THINPOOL_VG/$VM_PREFIX$image_name not found"
			echo "      first import image using 'fast-vm image_import $image_name'"
			exit 2
		fi

		vm_number="$3"
		# validate VM NUMBER
		if [[ $vm_number =~ ^-?[0-9]+$ ]]
		then
			if [ "$vm_number" -lt 20 ] || [ "$vm_number" -gt 220 ];then
				echo "[err] VM number out of range (20-220)"
				usage create
			fi
		else
			if [ "$vm_number" == "base" ]; then
				echo "[inf] creating base image VM"
			else
				echo "[err] only numbers from range 20-220 and word 'base' permited here"
				usage create
			fi
		fi


		# special case for creating only base image
		if [ "$vm_number" == "base" ]; then
			VM_NAME="$VM_PREFIX$image_name"
			
			tmp_xml=$(mktemp --suffix=.xml)
			sed -e "s/VM_NAME/$VM_PREFIX$image_name/g; s/THINPOOL_VG/$THINPOOL_VG/g; s/LIBVIRT_NETWORK/$LIBVIRT_NETWORK/g;" "$image_xml_path" > $tmp_xml
			virsh --connect qemu:///system define $tmp_xml >>$DEBUG_LOG 2>&1
			if [ ! "$?" -eq '0' ]; then
				echo "[err] defining base VM failed, doesn't exists alreadry?"
				exit 2
			fi

			# source file with hacks and apply them
			if [ -f "$hack_file" ]; then
				echo "[inf] applying hacks from $hack_file"
				. $hack_file
				if [ ! "$?" -eq "0" ]; then
					echo "[wrn] there was issue applying hacks to this machine, check $DEBUG_LOG for more details"
				fi
				echo "[inf] applying hacks finished"
			fi

			echo "[inf] base image VM created, to start this VM use 'virsh --connect qemu:///system start $VM_PREFIX$image_name'"
			echo "      This VM is used for customizing the base image of '$image_name' VMs"
			echo "      All changes you make to this VM would be available in newly created VMs"
			echo "      of that version, this will not affect already existing VMs of same version"
			exit 0
		fi
		
		## check if the machine doesn't exists already
		vm_disk_test=$(ls /dev/${THINPOOL_VG}/${VM_PREFIX}*-${vm_number} 2>/dev/null|wc -l )
		if [ "$vm_disk_test" -gt 0 ]; then
			echo "[err] there is already disk for this machine, VM creation aborted"
			exit 1
		fi

		## create regular machine
		VM_NAME="$VM_PREFIX$image_name-$vm_number"

		echo "[inf] creating disk '$VM_PREFIX$image_name-$vm_number'"
		echo "lvcreate" "newvm" "$image_name" "$image_name-$vm_number" | sudo --non-interactive $FASTVM_HELPER
		echo "chgrp" "/dev/$THINPOOL_VG/$VM_PREFIX$image_name-$vm_number" | sudo --non-interactive $FASTVM_HELPER
		echo "[inf] defining virtual machine '$VM_PREFIX$image_name-$vm_number' in libvirt"

		tmp_xml=$(mktemp --suffix=.xml)
		sed -e "s/VM_NAME/$VM_PREFIX$image_name-$vm_number/g; s/THINPOOL_VG/$THINPOOL_VG/g; s/LIBVIRT_NETWORK/$LIBVIRT_NETWORK/g;" "$image_xml_path" > $tmp_xml 2>>$DEBUG_LOG
		virsh --connect qemu:///system define $tmp_xml >>$DEBUG_LOG 2>&1

		echo "[inf] adding static lease for 192.168.$SUBNET_NUMBER.$vm_number into libvirts DHCP"
		vm_mac=$(virsh --connect qemu:///system dumpxml "$VM_PREFIX$image_name-$vm_number"|grep 'mac address'|cut -d\' -f 2)
		virsh --connect qemu:///system net-update "$LIBVIRT_NETWORK" add-last ip-dhcp-host --xml "<host mac='$vm_mac' ip='192.168.$SUBNET_NUMBER.$vm_number'/>" --live --config >>$DEBUG_LOG 2>&1

		# source file with hacks and apply them
		if [ -f "$hack_file" ]; then
			echo "[inf] applying hacks from $hack_file"
			. $hack_file
			if [ ! "$?" -eq "0" ]; then
				echo "[wrn] there was issue applying hacks to this machine, check $DEBUG_LOG for more details"
			fi
			echo "[inf] applying hacks finished"
		fi

		echo "[inf] VM '$VM_NAME' created"
		;;

	start)
		vm_number="$2"
		if [ -z "$vm_number" ]; then echo "[err] VM number missing"; usage start; fi
		
		vm_name=$(virsh --connect qemu:///system list --all |grep "$VM_PREFIX"|awk '{print $2}'|egrep "\-$vm_number$")

		if [ -z "$vm_name" ]; then
			echo "[err] VM with number '$vm_number' not found"
			exit 1
		fi
		
		# if there is any third argument start VM and console after
		if [ -z "$3" ]; then
			echo "[inf] starting VM $vm_name"
			virsh --connect qemu:///system start $vm_name >>$DEBUG_LOG 2>&1
			if [ "$?" != '0' ]; then
				echo "[err] failed to start VM, check $DEBUG_LOG for more information"
			fi
		else
			case "$3" in
				console)
					echo "[inf] starting VM $vm_name"
					echo "      and connecting to it serial console ..."
					virsh --connect qemu:///system start $vm_name 2>>$DEBUG_LOG
					if [ "$?" != '0' ]; then
						echo "[err] failed to start VM, check $DEBUG_LOG for more information"
					else
						virsh --connect qemu:///system console $vm_name 2>>$DEBUG_LOG
					fi
				;;
				ssh)
					echo "[inf] starting VM $vm_name"
					virsh --connect qemu:///system start $vm_name 2>>$DEBUG_LOG
					if [ "$?" != '0' ]; then
						echo "[err] failed to start VM, check $DEBUG_LOG for more information"
					else
						wait_for_ssh "$vm_number"
						if [ ! -z "$4" ] && [ -x "$4" ]; then
							eval "$4 192.168.$SUBNET_NUMBER.$vm_number"
						else
							ssh -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "root@192.168.$SUBNET_NUMBER.$vm_number"
						fi
					fi
				;;
				*)
					usage start
				;;
			esac
		fi
		;;
	ssh)
		vm_number="$2"
		if [ -z "$vm_number" ]; then echo "[err] VM number missing"; usage ssh; fi

		wait_for_ssh "$vm_number"
		if [ ! -z "$3" ] && [ -x "$3" ]; then
			eval "$3 192.168.$SUBNET_NUMBER.$vm_number"
		else
			ssh -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "root@192.168.$SUBNET_NUMBER.$vm_number"
		fi
		;;
	console)
		vm_number="$2"
		if [ -z "$vm_number" ]; then echo "[err] VM number missing"; usage console; fi

		vm_name=$(virsh --connect qemu:///system list --all |grep "$VM_PREFIX"|awk '{print $2}'|egrep "\-$vm_number$")
		if [ -z "$vm_name" ]; then
			echo "[err] VM with number '$vm_number' not found"
			exit 1
		fi

		virsh --connect qemu:///system console $vm_name 2>>$DEBUG_LOG
		;;
	delete)
		vm_number="$2"
		if [ -z "$vm_number" ]; then echo "[err] VM number missing"; usage delete; fi

		vm_name=$(virsh --connect qemu:///system list --all |grep "$VM_PREFIX"|awk '{print $2}'|egrep "\-$vm_number$")
		if [ -z "$vm_name" ]; then
			echo "[err] VM with number '$vm_number' not found"
			exit 1
		fi

		virsh --connect qemu:///system destroy $vm_name >>$DEBUG_LOG 2>&1

		vm_mac=$(virsh --connect qemu:///system dumpxml "$vm_name"|grep 'mac address'|cut -d\' -f 2)

		echo "[inf] removing DHCP reservation"
		virsh --connect qemu:///system net-update "$LIBVIRT_NETWORK" delete ip-dhcp-host --xml "<host mac='$vm_mac' ip='192.168.$SUBNET_NUMBER.$vm_number'/>" --live --config >>$DEBUG_LOG 2>&1
		PATH="$PATH:/usr/sbin" which dhcp_release >/dev/null 2>&1
		if [ "$?" -eq '0' ]; then
			echo "dhcp_release" "$LIBVIRT_NETWORK" "$vm_number" "$vm_mac" | sudo --non-interactive $FASTVM_HELPER
		else
			echo "[wrn] dhcp_release not found, to reause the same VM number you would need"
			echo "      need to delete DHCP leases file for $LIBVIRT_NETWORK network and"
			echo "      restart this network in the libvirt"
			echo "      http://lists.thekelleys.org.uk/pipermail/dnsmasq-discuss/2007q1/001094.html"
		fi
		
		echo "[inf] removing VM drive"
		echo "lvremove" "/dev/$THINPOOL_VG/$vm_name" | sudo --non-interactive $FASTVM_HELPER

		echo "[inf] undefining VM from libvirt"
		virsh --connect qemu:///system undefine $vm_name >>$DEBUG_LOG 2>&1

		echo "[inf] VM '$vm_name' deleted"
		;;
	list)
		echo "VM#   status     image_name"
		echo "==========================="
		virsh --connect qemu:///system list --all |awk '{print $2,$3,$4,$5}'|egrep "^${VM_PREFIX}.*-[0-9]+"|sed "s/${VM_PREFIX}\(.\+\)-\([0-9]\+\) \([a-zA-Z ]\+\)$/\2 - \3 - \1/" |sort -n
		;;
	*) 
		echo "[err] unknown action"
		usage
		;;
esac	
