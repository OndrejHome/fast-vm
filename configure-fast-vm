#!/bin/sh
config_file="/etc/fast-vm.conf"

## terminal colors
c_red=$(tput setaf 1)
c_yellow=$(tput setaf 3)
c_green=$(tput setaf 2)
c_cyan=$(tput setaf 6)
c_normal=$(tput sgr0)
## common outputs
o_err="[${c_red}err${c_normal}]"
o_wrn="[${c_yellow}wrn${c_normal}]"
o_inf="[${c_cyan}inf${c_normal}]"
o_ok="[${c_green}ok${c_normal}]"

# load defaults and old configuration if exists
if [ -f /usr/share/fast-vm/fast-vm.conf.defaults ]; then
	. /usr/share/fast-vm/fast-vm.conf.defaults
fi
if [ -f "$config_file" ]; then
	. $config_file
else
	touch $config_file
fi

ask_question () {
	question="$1"
	default_value="$2"
	config_variable="$3"

	# lets get meaningfull answer from user
	success=0
	while [ "$success" -eq 0 ];
	do
		printf "[?] $question \n[$default_value]: "
		read answer
		if [ -z "$default_value" ] && [ -z "$answer" ]; then
			printf "$o_err You must provide value\n"
		else
			success=1
		fi
		echo
	done

	# and write the output into configuration file
	sed -i "/^$config_variable=/d" $config_file
	if [ -z "$answer" ]; then
		echo "$config_variable=$default_value" >> $config_file
	else
		echo "$config_variable=$answer" >> $config_file
	fi
	. $config_file
}

printf "$o_inf ==>> fast-vm configuration script\nYou can run this script repeatedly and interrupt it with ctrl+c.\nScript will always recheck all configuration options. fast-vm system configuration will be saved in /etc/fast-vm.conf.\n\n"

## check if we can connect to libvirt and if not, inform the user that it is needed
virsh_test=$(virsh --connect qemu:///system exit >/dev/null 2>&1)
if [ "$?" != '0' ]; then
	printf "$o_err libvirt daemon is not running or we cannot connect to it.\nEnsure that libvirt service is running and that you can connect to it using command 'virsh --connect qemu:///system' and then re-run this configuration script.\n"
	exit 1
fi

success=0
while [ "$success" -eq 0 ];
do

	available_vgs=$(vgs -o vg_name,vg_attr,vg_size,vg_free)
	ask_question "VG for LVM thin pool\n fast-vm is using LVM thin LV to store VM images and data.\n Available VGs on your system are: \n $available_vgs\n On which existing VG should be this thin LV?" "$THINPOOL_VG" "THINPOOL_VG"
	ask_question "LVM thin pool name\n Name the thin LV on which data would be stored.\n NOTE: This can be both 'name of existing thinpool LV' or 'name for a new one'.\n If LV with this name doesn't exists, it will get created by this setup." "$THINPOOL_LV" "THINPOOL_LV"

	lvdisplay "$THINPOOL_VG/$THINPOOL_LV" >/dev/null 2>&1
	if [ ! "$?" -eq "0" ]; then
		ask_question "LVM thin pool size\n You can use units understood by LVM like M,G,T.\n NOTE: This applies only when thin LV doesn't exists yet." "$THINPOOL_SIZE" "THINPOOL_SIZE"
	fi
	ask_question "VM name prefix in libvirt\n Prefix is used in VM names and VM drive names." "$VM_PREFIX" "VM_PREFIX"

	ask_question "Users that want to use fast-vm must be members of following group.\n WARNING: if this group is different from 'libivrt' you would have to adjust libvirt configuration.\n Please check the fast-vm.conf(5) if setting this to something else than 'libvirt'." "$FASTVM_GROUP" "FASTVM_GROUP"
	if [ "$FASTVM_GROUP" != "libvirt" ]; then
		printf "$o_wrn You are using non-default group for FASTVM_GROUP.\n Please check the fast-vm.conf(5) on how to configure libvirtd for this to work properly.\n\n"
	fi

	ask_question "Libvirt network (bridge) name\n This configuration will create a libvirt \n network with this name providing NAT for VMs." "$LIBVIRT_NETWORK" "LIBVIRT_NETWORK"
	ask_question "Libvirt subnet number (192.168.XX.0/24)" "$SUBNET_NUMBER" "SUBNET_NUMBER"

	ask_question "Only 'root' and 'owner' of VM should be able to delete VM through fast-vm?\n \"yes\" - only 'root' and 'owner' can delete VM\n \"no\" - anyone allowed to use fast-vm can delete VM (default in versions =< 0.9)" "$FASTVM_OWNER_ONLY_DELETE" "FASTVM_OWNER_ONLY_DELETE"

	## reload the configuration file and check the system for changes
	. $config_file

	# redefine the sudoers file
	sed -i -e "s/^\%[^ ]* \(.* \/usr\/libexec\/fast-vm-helper\.sh\)$/\%${FASTVM_GROUP} \1/" /etc/sudoers.d/fast-vm-sudoers >/dev/null 2>&1

	# LVM VG check
	vgdisplay "$THINPOOL_VG"  >/dev/null 2>&1
	if [ ! "$?" -eq '0' ]; then
		printf "$o_err VG '$THINPOOL_VG' not found\n"
		continue
	fi

	# LVM thinpool LV check
	lvdisplay "$THINPOOL_VG/$THINPOOL_LV" >/dev/null 2>&1
	if [ ! "$?" -eq "0" ]; then
		printf "$o_wrn LV '$THINPOOL_VG/$THINPOOL_LV' not found\n"
		echo "Following commands would be executed to create thin pool:"
		echo "  lvcreate -n $THINPOOL_LV -L $THINPOOL_SIZE $THINPOOL_VG"
		echo "  lvconvert --type thin-pool $THINPOOL_VG/$THINPOOL_LV"
		printf "[?] Create now? (y/n) "
		read answer
		if [ "$answer" = "y" ]; then
			printf "$o_inf Creating ...\n"
			## create thin pool
			lvcreate -n "$THINPOOL_LV" -L "$THINPOOL_SIZE" "$THINPOOL_VG"
			if [ ! "$?" -eq "0" ]; then
				printf "$o_err Error while creating LV for thin pool, aborting\n"
				exit 1
			fi
			lvconvert --type thin-pool "$THINPOOL_VG/$THINPOOL_LV"
			if [ ! "$?" -eq "0" ]; then
				printf "$o_err Error while converting LV into thin pool, aborting\n"
				exit 1
			fi
			printf "$o_ok LVM thinpool successfuly created\n"
		else
			printf "$o_wrn fast-vm will not work without thinpool LV!\n"
		fi
	fi

	# check if the LV is a thinpool
	is_thin_pool=$(lvdisplay "/dev/$THINPOOL_VG/$THINPOOL_LV" 2>/dev/null|grep 'LV Pool'|wc -l)
	if [ ! "$is_thin_pool" -eq "2" ]; then
		printf "$o_err LV /dev/$THINPOOL_VG/$THINPOOL_LV is not a thin pool. To create a thinpool for fast-vm delete this LV a run the configuration again\n"
		exit 1
	fi

	# check for the libvirt network
	virsh --connect qemu:///system net-info "$LIBVIRT_NETWORK" >/dev/null 2>&1
	if [ ! "$?" -eq "0" ]; then
		printf "[?] Network $LIBVIRT_NETWORK is not defined in libvirt, define now? (y/n) "
		read answer
		if [ "$answer" = "y" ]; then
			printf "$o_inf Creating ...\n"
			tmp_file=$(mktemp --suffix=.xml)
			sed -e "s/NET_NAME/$LIBVIRT_NETWORK/g; s/SUBNET_NUMBER/$SUBNET_NUMBER/g" /usr/share/fast-vm/fast-vm-network.xml > "$tmp_file"
			virsh --connect qemu:///system net-define "$tmp_file"
			if [ ! "$?" -eq "0" ]; then
				printf "$o_err Error creating libvirt network, aborting\n"
				exit 1
			fi
			virsh --connect qemu:///system net-autostart "$LIBVIRT_NETWORK"
			if [ ! "$?" -eq "0" ]; then
				printf "$o_err Error marking libvirt network as autostarted, aborting\n"
				exit 1
			fi
			virsh --connect qemu:///system net-start "$LIBVIRT_NETWORK"
			if [ ! "$?" -eq "0" ]; then
				printf "$o_err Error starting libvirt network, aborting\n"
				exit 1
			fi
			printf "$o_inf fast-vm libvirt network created and autostarted\n"
		else
			printf "$o_wrn fast-vm will not work without libvirt network!\n"
		fi
	fi

	is_subnet_number=$(virsh --connect qemu:///system net-dumpxml "$LIBVIRT_NETWORK" 2>/dev/null|grep 'ip address'|cut -d. -f3)
	if [ "$is_subnet_number" != "$SUBNET_NUMBER" ];then
		printf "$o_err Libvirt network subnet is different from one provided in fast-vm configuration. Fix fast-vm configuration or libvirt network configuration\n"
		exit 1
	fi

	if [ -n "$FASTVM_NOTES_DIR" ] && [ "$(whoami)" == "root" ]; then
		# only root can run conversion to avoid accidental change by regular users
		printf "[?] Do you want to convert VM notes into fast-vm 1.4 format? \n[yes]: "
		read answer
		if [ "$answer" == "yes" ] || [ -z "$answer" ]; then
			printf "$o_inf Converting notes into VM metadata for fast-vm 1.4\n"
			for vm in $(seq 20 220); do
				if [ -f "$FASTVM_NOTES_DIR/$vm" ]; then
					printf "$o_inf Found note for VM $vm\n"
					owner=$(stat --format="%U" "$FASTVM_NOTES_DIR/$vm")
					content=$(cat "$FASTVM_NOTES_DIR/$vm")
					profile='---'
					if [ -f "$FASTVM_NOTES_DIR/$vm.profile" ]; then
						profile=$(cat "$FASTVM_NOTES_DIR/$vm.profile")
					fi
					last_activity=$(date -r "$FASTVM_NOTES_DIR/$vm" +%s)
					vm_name=$(virsh --connect qemu:///system list --all |grep "$VM_PREFIX"|awk '{print $2}'|egrep "\-$vm$")
					if [ -n "$vm_name" ]; then
						virsh --connect qemu:///system desc --config "$vm_name" -- "1,$owner,$last_activity,$profile,$content"
						rm "$FASTVM_NOTES_DIR/$vm"
						if [ -f "$FASTVM_NOTES_DIR/$vm.profile" ]; then rm "$FASTVM_NOTES_DIR/$vm.profile"; fi
					else
						printf "$o_inf but no VM with number $vm exists, delete the file?\n"
						rm -i "$FASTVM_NOTES_DIR/$vm"
					fi
				fi

			done
		else
			printf "$o_inf Skipping, you need to answer 'yes' to run conversion\n"
		fi
	fi

	printf "$o_ok fast-vm configured\n"
	success=1
done
