fast-vm User Guide

<ul>
<li>This is <b>draft</b> of User Guide for <code>fast-vm</code> version 1.1.
- 1.3.</li>
<li>If you have find an mistake (and you bet there are some) or would like to
request some part to be documented in this guide that you use please get in
touch with <a href="https://ssl.famera.cz/blog/about.html">the Author</a>.</li>
<li>While <code>fast-vm</code> allows most of operations to be run as normal
user this guide uses the <code>#</code> symbol to indicate commands that can
be run and doesn't necessarily require super user. This is for convenience
when making copy&amp;paste of commands to terminal which leads to command
being copied and not executed as <code>#</code> comments it out.</li>
</ul>

<h2 id='what_is_fast-vm'>1. What is <code>fast-vm</code>?</h2>
<p><code>fast-vm</code> is a script that provides command-line interface to create virtual
machines (VMs) in libvirt based on imported disks in LVM and XML
templates.</p>

<h3 id='system_requirements'>1.1. system requirements for running
<code>fast-vm</code></h3>
<p><code>fast-vm</code> needs several things for proper operation, the minimum is:
</p>
<ul>
<li>running and functional libvirt daemon (pulled in as dependency from
<code>fast-vm</code> RPM packages)</li>
<li>user with access to libvirt (root or normal user with unrestricted
read-write access to libvirt)</li>
<li>some templates to start with (you can also create your own, check the
section <a href="#creating_custom_images">Creating custom images</a>)</li>
<li>LVM tools with thinpool capabilities (most of todays distributions has
this)</li>
<li>some space on LVM for <code>fast-vm</code> data (you can create also LVM on top of
loopback device if you are out of space, check ADVANCED USAGE part)</li>
</ul>

<h3 id='how_fast-vm_works'>1.2. How <code>fast-vm</code> works</h3>
<p>Once configured, <code>fast-vm</code> stores the templates of VM disk drives
(<b>"images"</b>) in LVM thinpool LV for space efficiency. Templates for VMs
(<b>"libvirt XML"</b>) are just libvirt XMLs with few macros from
<code>fast-vm</code>
(full listing in man page).</p>

<p>When <code>fast-vm</code> is requested to create a VM, it will:</p>
<ol>
<li>create new writable LVM snapshot of disk drive</li>
<li>define libvirt VM for it (taking the libvirt XML, replacing macros and
defining the VM using 'virsh define')</li>
<li>make a static DHCP reservation for libvirt network on which VM will be.
(so you can have predictable IPv4 address of the VM)</li>
<li>(optionally) after VM was defined in libvirt and all other tasks were done
it can run so called 'hack file' that customize the image of VM further (one
of use cases is to run guestfish tools to alter needed files on VM disk drive
to achieve additional level of customization)</li>
</ol>

<p>When <code>fast-vm</code> is requested to delete a VM, it will:</p>
<ol>
<li>stop the VM forcefully if it is running</li>
<li>remove static DHCP reservation from libvirt and send dhcp_release request
when <code>dnsmasq-tools</code> are present(this is highly recommended).</li>
<li>remove the writable snaphot of machine</li>
<li>(optionally) before undefining the VM from libvirt the so called 'delete
hack file' can be run to do cleanup which can be a counter part to 'hack file'
from VM creation time</li>
<li>undefine the VM from libvirt</li>
</ol>

<h3 id='what_is_fast-vm_server'>1.3. What is <code>fast-vm server</code>?</h3>
<p>In version 1.0 <code>fast-vm</code> was provided with feature that helps to
identify which user on system created the VM. This allows for basic prevention
of accidental removal of VM by other users and enables the use in multi-user
environment.</p>
<p><code>fast-vm server</code> in this document refers to any machine running
<code>fast-vm</code> accessible by normal users that are in group allowed to
use <code>fast-vm</code>. While the <code>fast-vm</code> can be used by individual 
it is often also used to provide access for multiple user so 
they can collaborativelly access the VMs.</p>

<p><b>SECURITY NOTE:</b> Typical installation of <code>fast-vm</code> suggest giving users full
read/write access to libvirt daemon and several commands using 'sudo'. Check
the chapter <a href="#security_information">Security information</a> of this document to see 
why the <code>fast-vm</code> needs such access and feel free 
to further restrict actions you find appropriate.</p>

<h3 id='fast-vm_use_cases'>1.4. Use cases for <code>fast-vm</code></h3>
<p>Suitable use cases:</p>
<ul>
<li>"scratch machines" - machines that you use for few things and then you
throw them away</li>
<li>automated deployment testing - as the <code>fast-vm</code> is easy to script and can
wait until machine is up and running SSH this makes it great to use it for
testing scripts for automation (ansible, puppet, etc.)</li>
<li>playing with clusters or system requiring many similar machines - the way
<code>fast-vm</code> operates allows to provision quickly a lot of machines that are both
independent and yet quite similar</li>
<li>...</li>
</ul>

<p>Not very suitable use cases:</p>
<ul>
<li>secure systems - <code>fast-vm</code> is trying to allow many users to access shared
pool of images and VMs - this is going against preventing any users from
access drives of other machines. By design it might not be easy or possible 
to guarantee the usage of <code>fast-vm</code> in environment where users must be
strictly separated.</li>
</ul>

<h3 id='concepts_images_vm_numbers_and_vms'>1.5. Concepts: Images, VM_number and VMs</h3>
<p>Fast-vm is trying to simplify work with pre-prepared virtual machines and
therefore most of the time you will already use machine that has some system
installed on it. What system will be pre-installed on VM is determined by
<b>Image</b> from which the VM was created. Images are usually named the way that
it is easy to guess what system they contain (for example image name 'r7-3'
will most probably contain RHEL 7.3 system).</p>
<p>To identify the VMs, <code>fast-vm</code> uses <b>VM_number</b> as the name of your virtual machine. 
Number from range 20 to 220 (currently). So you don't need to remember how have you named your 
VM you just need to remember the VM_number which is used with all VM operations
to identify your VM.</p>

<p>Note: You can add notes/descriptions to VMs if you desire to have something
like name (check <code>fast-vm edit_note</code> command).</p>

<h2 id='installation_updates_unistallation'>2. Where to download and how to
install <code>fast-vm</code></h2>
<p>Currently there are several methods for installation that are described
below. If you are interested into making package for your distribution check
out with <a href="https://ssl.famera.cz/blog/about.html">the Author</a>.</p>

<p>Useful links for <code>fast-vm</code> project:</p>
<ul>
<li>Source codes cat be found at <a href="https://github.com/OndrejHome/fast-vm">GitHub</a></li>
<li>RPM packages are in <a href="https://github.com/OndrejHome/fast-vm/releases">GitHub Release</a></li>
<li>Bugs/RFEs can be reported at <a href="https://github.com/OndrejHome/fast-vm/issues">GitHub issues</a></li>
</ul>

<h3 id='installation_rpm'>2.1. Installation from RPM</h3>
<p>This type of installation is supported on latest releases of CentOS/RHEL
and Fedora. Below are examples on how to install the current release on these
distribution.</p>

<p>Fedora 25</p>
<pre>
# curl -o /etc/yum.repos.d/fast-vm.repo https://copr.fedorainfracloud.org/coprs/ondrejhome/fast-vm/repo/fedora-25/ondrejhome-fast-vm-fedora-25.repo
# dnf install fast-vm
</pre>

<p>CentOS 7.3/RHEL 7.3</p>
<pre>
# curl -o /etc/yum.repos.d/fast-vm.repo https://copr.fedorainfracloud.org/coprs/ondrejhome/fast-vm/repo/epel-7/ondrejhome-fast-vm-epel-7.repo
# yum install fast-vm
</pre>

<p>On both RHEL and CentOS is strongly recommended to install following
additional packages which improves features provided by <code>fast-vm</code></p>
<pre># yum install curl pv dnsmasq-utils</pre>

<p>If you plan using publically available images from Author then the followin
package is required for correct application of creation scripts and their
proper functionality</p>
<pre># yum install libguestfs-tools-c
# dnf install libguestfs-tools-c</pre>

<h3 id='installation_manual'>2.2. Manual installation from source code</h3>
<p>On system that doesn't use RPM you can install <code>fast-vm</code> using
traditional Makefile that is available in the Git repository. To install use
command below.</p>

<pre># make install</pre>

<h3 id='updates'>2.3. Updating <code>fast-vm</code></h3>
<p>Always check the notes in <a
href="https://github.com/OndrejHome/fast-vm/releases">GitHub Release</a>
before updating to see if there were any changes requiring additional steps
after update.</p>

<p>When using repository in Fedora/CentOS/RHEL just use the update command as
show below.</p>

<pre>
# dnf update fast-vm
# yum update fast-vm
</pre>

<h3 id='uninstall'>2.4. Uninstalling <code>fast-vm</code></h3>
<p>If you don't like <code>fast-vm</code> please consider leaving me a
feedback on what you don't like or what could get improved so you can use it.</p>

<p>If you have installed <code>fast-vm</code> from RPM then just uninstall the
package.</p>

<pre>
# dnf remove fast-vm
# yum remove fast-vm
</pre>

<p>If you have used manual installation there is currently no automated way 
of unistalling but in general it is enough to check the <code>Makefile</code> 
and remove all files it creates in system. Additionally you can remove the directories
<code>/etc/fast-vm/</code>, <code>$HOME/.fast-vm/</code>, and notes for fast-vm
which gets by default generated int <code>/var/tmp/</code>.</p>

<h3 id='configuring_fast-vm'>2.5. Configuring <code>fast-vm</code></h3>
<p>After initial installation or update of <code>fast-vm</code> it is highly
recommended to run command below to perform configuration with validation.</p>

<pre># configure-fast-vm</pre>

<p><b>Important:</b><code>configure-fast-vm</code> must be run as <code>root</code> user.</p>

<p>Script will create and validate configuration file
<code>/etc/fast-vm.conf</code>. Further it will allow during initial
configuration the creation of storage for <code>fast-vm</code> and libvirt
network that will provide networking to VMs.</p>

<h4 id='configure-fast-vm-example'>2.5.1. <code>configure-fast-vm</code>
walkthrough with examples</h4>

a) Start configuration script.
<pre>
[root@mypc ~]# configure-fast-vm
[inf] ==>> fast-vm configuration script
You can run this script repeatedly and interrupt it with ctrl+c.
Script will always recheck all configuration options. fast-vm system configuration will be saved in /etc/fast-vm.conf.
</pre>

b) Enter on which VG the fast-vm will have thinpool LV as storage.
<pre>
[?] VG for LVM thin pool
 fast-vm is using LVM thin LV to store VM images and data.
 On which existing VG should be this thin LV?
[]: f25
</pre>

c) Provide name of thinpool LV. If thinpool LV doesn't exist script will create for you later.
<pre>
[?] LVM thin pool name
 Name the thin LV on which data would be stored.
 NOTE: This can be both 'name of existing thinpool LV' or 'name for a new one'.
 If LV with this name doesn't exists, it will get created by this setup.
[fastvm-pool]:
</pre>

d) (only when thinpool LV doesn't exit) Enter size for thinpool LV that will be created.
<pre>
[?] LVM thin pool size
 You can use units understood by LVM like M,G,T.
 NOTE: This applies only when thin LV doesn't exists yet.
[50G]: 20G
</pre>

e) Enter prefix that will be used for VMs created in libvirt.
<pre>
[?] VM name prefix in libvirt
 Prefix is used in VM names and VM drive names.
[fastvm-]:
</pre>

f) Enter system group name that will be allowed to use fast-vm. Only one group is allowed.
<pre>
[?] Users that want to use fast-vm must be members of following group.
 WARNING: if this group is different from 'libivrt' you would have to adjust libvirt configuration.
 Please check the fast-vm.conf(5) if setting this to something else than 'libvirt'.
[libvirt]:
</pre>

g) Enter name of libvirt network that will be used by fast-vm. If network doesn't exist the configurator will create it later.
<pre>
[?] Libvirt network (bridge) name
 This configuration will create a libvirt
 network with this name providing NAT for VMs.
[fastvm-nat]:
</pre>

h) Choose the subnet number that will be used by fast-vm to allocate IP addresses.
<pre>
[?] Libvirt subnet number (192.168.XX.0/24)
[22]: 23
</pre>

i) Choose directory in which fast-vm will store stateful data about VMs such as notes.
<pre>
[?] Directory in which to store VM notes
[/var/tmp]:
</pre>

j) Decide if fast-vm should prevent delete of machines created by other users.
<pre>
[?] Only 'root' and 'owner' of VM should be able to delete VM through fast-vm?
 "yes" - only 'root' and 'owner' can delete VM
 "no" - anyone allowed to use fast-vm can delete VM (default in versions =< 0.9)
[no]:
</pre>

k) (only if thinpool LV didn't existed) Configurator will ask if you wanna create the thinpool LV.
<pre>
[wrn] LV 'f25/fastvm-pool' not found
Following commands would be executed to create thin pool:
  lvcreate -n fastvm-pool -L 20G f25
  lvconvert --type thin-pool f25/fastvm-pool
[?] Create now? (y/n) y
[inf] Creating ...
  Logical volume "fastvm-pool" created.
  WARNING: Converting logical volume f25/fastvm-pool to thin pool's data volume with metadata wiping.
  THIS WILL DESTROY CONTENT OF LOGICAL VOLUME (filesystem etc.)
Do you really want to convert f25/fastvm-pool? [y/n]: y
  Converted f25/fastvm-pool to thin pool.
[ok] LVM thinpool successfuly created
</pre>

l) (only if libvirt network didn't existed) Configurator will ask if to create libvirt network for fast-vm.
<pre>
[?] Network fastvm-nat is not defined in libvirt, define now? (y/n) y
[inf] Creating ...
Network fastvm-nat defined from /tmp/tmp.MBoYPmWE2g.xml

Network fastvm-nat marked as autostarted

Network fastvm-nat started

[inf] fast-vm libvirt network created and autostarted
</pre>

m) End of configuration
<pre>
[ok] fast-vm configured
</pre>

<h4 id='configure_lvm_filters'>2.5.2. (optional) Configure LVM filters</h4>
Optional but recommended is to filter out detection of LVM on the VG that
holds the thinpool LV for fast-vm. For example if you use VG <code>f25</code>
then following entries can be add into LVM <code>filter =</code>.

<pre>
"r|/dev/f25/.*|"
"r|/dev/mapper/f25-.*|"
</pre>

Example of incorporating the above filter into <code>/etc/lvm/lvm.conf</code>.
<pre>
...
devicec {
   ...
   filter = [ "r|/dev/nbd.*|", "r|/dev/f25/.*|", "r|/dev/mapper/f25-.*|", "a|.*|" ]
   ...
}
...
</pre>
NOTE: Final filter configuration depends heavilly on your environment/system.

<h3 id='ovmf_uefi_support'>2.6. UEFI boot support with OVMF</h3>
<p>To use libvirt with UEFI boot a special firmware is required.
<code>fast-vm</code> doesn't require any special configuration for UEFI boot
except of having needed firmware and image that was pre-installed with UEFI
support. More on how to install UEFI firmware into libvirt check <a
href="https://fedoraproject.org/wiki/Using_UEFI_with_QEMU">Fedora: Using UEFI
with QEMU</a> article.</p>

<p>To use images provided by the Author with UEFI on Fedora following steps
needs to be taken.</p>

<p>1a. (Fedora 24+) Install package <code>edk2-ovmf</code> containing firmware
files.</p>
<pre># dnf install edk2-ovmf</pre>

<p>1b. (CentOS/RHEL) Download the
<code>edk2.git-ovmf-x64-xxxxx.noarch.rpm</code> from <a
href="https://www.kraxel.org/repos/jenkins/edk2/">OVMF generated RPMs</a> and
install it manualy using <code>yum</code>.
</p>

<p>2. Ensure that <code>/etc/libvirt/qemu.conf</code> contains following
variable with value below.</p>
<pre>
nvram = [
   "/usr/share/OVMF/OVMF_CODE.fd:/usr/share/OVMF/OVMF_VARS.fd"
      ]
</pre>

<p>3a. (Fedora 24+) Ensure that variable from previous steps is pointing to correct firmware
files. With defaut installation on Fedora 24 the following additional commands
are needed.</p>

<pre>
# mkdir /usr/share/OVMF  # as this directory is usually not present on system
# ln -s /usr/share/edk2/ovmf/OVMF_CODE.fd /usr/share/OVMF/OVMF_CODE.fd
# ln -s /usr/share/edk2/ovmf/OVMF_VARS.fd /usr/share/OVMF/OVMF_VARS.fd
</pre>

<p>3b. (CentOS/RHEL) Ensure that variable from previous steps is pointing to correct 
firmware files. WHen using package from <a 
href="https://www.kraxel.org/repos/jenkins/edk2/">OVMF generated RPMs</a>.
</p> the following additional commands are needed.</p>

<pre>
# mkdir /usr/share/OVMF  # as this directory is usually not present on system
# ln -s /usr/share/edk2.git/ovmf-x64/OVMF_CODE-pure-efi.fd /usr/share/OVMF/OVMF_CODE.fd
# ln -s /usr/share/edk2.git/ovmf-x64/OVMF_VARS-pure-efi.fd /usr/share/OVMF/OVMF_VARS.fd
</pre>

<h2 id='basic_operations'>3. Basic operations in <code>fast-vm</code></h2>

<h3 id='accessing_vm'>3.1. Accessing the VMs</h3>
<p>There are 3 ways discussed in this guide on how to access your VM created
by <code>fast-vm</code>. In most cases you will need to know password of some
user on VM to which you are connecting. To find which user and password to
used with such VMs check with provider of <b>Image</b>. Author of
<code>fast-vm</code> uses most commonly user 'root' with password 'testtest' in images that
he provides, however it doesn't apply to all systems so check carefully with
provider of Image to know how to access the VMs. This guide will assume the
use of account 'root' with password 'testtest' as account information for VMs.</p>

<h4 id='accessing_vm_using_ssh_or_remote_connection'>3.1.1. Accessing VMs
using SSH or other remote connection protocols running on VM</h4>
<p>Each VM will be assigned IP address by DHCP from local subnet that ends with 
VM_number. For example if your VM_number is <code>42</code> and the subnet used by
<code>fast-vm</code> is <code>192.168.11.0/24</code>, then your VM will be
assigned address <code>192.168.11.42</code> by DHCP. 
To figure out which address is assigned to your VM you can also use command
below to print the IP of your VM.</p>
<pre># fast-vm info &lt;VM_number&gt;</pre>

<p>If you would like to login using SSH as root to your VM you can use
shortcut command below.</p>
<pre># fast-vm ssh &lt;VM_number&gt;</pre> 
<p>This command provides following advantages over normal SSH connection:</p>
<ul>
<li>Waits for SSH on your VM to become available and probe for availability every second. 
Once SSH is ready then connect (this is equivalent of trying <code>ssh
root@&gt;your_machine_ip&lt;</code> manually until you succeed).</li>
<li>Ignore any SSH keys stored in 'known_hosts' file - especially useful if you re-use 
same VM_number and you don't want to be bothered with updating 'known_hosts'
file.<code>fast-vm</code> bypasses saving of the SSH key into 'known_hosts'
file.</li>
</ul>

<h4 id='accesing_vm_using_serial_console'>3.1.2. Accessing VMs using serial
console</h4>
<p>Most of images provided by Author for <code>fast-vm</code> are pre-configured to provide serial
console access. This allows you to connect via virtual serial port to text console of your
VM. This is useful when VM network is not working and provides you also with access to
GRUB boot menu. Compared with graphical console access discussed in next
section you have ability to copy and paste text easily from serial
console.</p>
<p>To access serial console of machine use command below</p>
<pre># fast-vm console &lt;VM_number&gt;</pre>

<p>To get out of serial console of machine use escape sequence <code>ctrl +
]</code>('ctrl' key and 'right squared bracket' key)</p>

<h4 id='accessing_vm_using_graphical_console'>3.1.3. Accessing VMs using graphical 
console (Spice/VNC)</h4>
<p>Depending on Image this access might not be configured (for example headless systems 
with serial console only provided by Author). There is no dedicated command to
launch connection to VM using graphical console.</p>
<p>The simplest way on how to get access to graphical console even when the
<code>fast-vm server</code> is the remote system is to use GUI
<code>virt-manager</code> which has integrated access to graphical console</p>

<h3 id='creating_vm'>3.2. Creating VM</h3>
<p>To create VM you need to know 2 things:</p>
<ul>
<li>name of image or profile you want to use</li>
<li>know one VM_number on <code>fast-vm server</code> that is not in use</li>
</ul>

<p>To list available images and profiles you can use commands below</p>
<pre># fast-vm list_images
# fast-vm list_profiles</pre>

<p>To list VM_numbers that are already in use you can use the command below</p>
<pre># fast-vm list</pre>

<p>Once you have needed information the creation of VM is done using command
below</p>
<pre># fast-vm create &lt;image_name or profile_name&gt; &lt;VM_number&gt;</pre>

<p><b>TIP:</b> To make things easier the <code>fast-vm</code> provides bash command 
completion for both image/profile names and list of free VM_numbers. (just use
TAB key to show possible options). Bash completion will also show 'only the
free VM_numbers' 
when creating VM.</p>

<h3 id='starting_vm'>3.3. Starting and stopping VMs</h3>
<p>Once VM exists you can start it using command below.</p>
<pre># fast-vm start &lt;VM_number&gt;</pre>

<p>To forcefully stop VM you can use command below.</p>
<pre># fast-vm stop &lt;VM_number&gt;</pre>

<p>To gracefully stop your VM you can add word 'graceful' to the end of stop
command like below. This will send ACPI shutdown signal to VM instead of
forcefully killing it. If OS can recognize this ACPI singal it will initiate
appropriate action (usually grafeul shutdown of system).</p>
<pre># fast-vm stop &lt;VM_number&gt; graceful</pre>

<h3 id='deleting_vm'>3.4. Deleting VMs</h3>
<p>If you don't need the VM any more then you can delete it using command
below.</p>
<pre># fast-vm delete &lt;VM_number&gt;</pre>

<p><b>WARNING:</b> You will NOT be prompted to confirm the VM deletion.
VM can be deleted anytime - regardless if it is running or not.</p>

<p>By default <code>fast-vm</code> will prevent you from deleting VMs that
created byt another users (does not apply to situation when running as
root). For more information check the option FASTVM_OWNER_ONLY_DELETE in man
page.<p>

<h3 id='listing_vms'>3.5. Listing VMs on <code>fast-vm server</code></h3>
<p>To list the VMs on <code>fast-vm server</code> created by you and other users use
command below.</p>
<pre># fast-vm list</pre>

<p>This command will show list or VMs ordered by VM_number
along with <b>Image name</b> from which the VMs were created, current VM
<b>status</b> (running/stopped), <b>Profile name</b> using which was VM
created if any and VM <b>Notes</b> containing the name of owner who created
the VM and any additional notes for given VM.</p>

<p>Example <code>fast-vm list</code> output</p>
<pre>
VM# Image name      Status       Profile_name    Notes
 21 c7.3            shut off     ---             ondrej: CentOS 7.3 minimal 
 22 c7.3            shut off     centos-g-7.3    ondrej: CentOS 7.3 with graphical console
 23 c6.8            running      ---             root: some other running machine
</pre>

<h3 id='editing_vm_notes'>3.6. Creating and editing VM notes</h3>
<p>Sometimes VM_numbers might not be enough to contain enough information to identify
the VM therefore you can assign your VM a note using command below</p>
<pre># fast-vm edit_note &lt;VM_number&gt; "your_note_as_single_parameter"</pre>

<p>This note will be shown in listing of VMs and also it will be included in
the libvirt 'visible name' so some clients such as 'virt-manager' can show it
to help you to identify your VM.</p>

<h3 id='importing_images'>3.7. Importing images into <code>fast-vm</code></h3>
<p>The main thing in <code>fast-vm</code> are <b>Images</b> which provides the
templates upon which we create new VMs. It is possible to create you own Image
or you can import some premade ones. Below is link for some images pre-made by
Author.</p>

<p><a href="https://ssl.famera.cz/blog/fast-vm/about.html">Public
<code>fast-vm</code> images created by the Author</a></p>

<p>To import simple image into <code>fast-vm</code> you can use command below.</p>
<pre># fast-vm import_image &lt;Image_name&gt; &lt;path_or_URL_to_Image_file&gt; &lt;path_or_URL_to_libvirt_XML&gt;</pre>

<p>Images can be optionally imported with additional 2 parameter specifying the
scripts that should be run when the VM is created and deleted. (Images provided
by Author uses only  scripts during VM creation to provide access to serial
console and some minimal customization such as hostname and networking setup)</p>

<p>Example of importing image of CentOS 7.3 with script used during VM
creation from Authors site.</p>
<pre># fast-vm import_image c7.3 https://ssl.famera.cz/large_data/fast-vm-images/centos-7.3.img.xz https://raw.githubusercontent.com/OndrejHome/fast-vm-public-images/master/centos/xml/centos-6.3-7.3.xml https://raw.githubusercontent.com/OndrejHome/fast-vm-public-images/master/centos/hacks/centos-7-hacks.sh</pre>

<h3 id='importing_and_using_profiles'>3.8. Importing and using Profiles</h3>
<p><b>Profiles</b> in <code>fast-vm</code> are used to provide templates with same
Image file as existing Images but with different set of libvirt XML,
creation/deletion scripts. This is useful when you have for example several HW
configurations for same system that you would like to use so you don't have to
import the same Image twice (meaning taking up disk space twice).</p>

<p>To import a profile you can use command below.</p>
<pre># fast-vm import_profile &lt;ProfileName&gt; &lt;ImageName&gt; &lt;PathToLibvirtXML&gt; &lt;PathToHacksFile&gt; &lt;PathToDeleteHackFile&gt;</pre>
<p>Last two parameters are optional the same way as when importing the Image.</p>

<h3 id='resizing_disks_of_vms_and_images'>3.9. Resizing the disks of VMs and
Images (from <code>fast-vm-1.2</code>)</h3>
<p>In case you want to change the size of disks in either Image or existing VM
you can use one of the following commands to do so:</p>

Resizing the disk of <code>fast-vm</code> VM to new value
<pre>
# fast-vm resize <VM_number> <New_disk_size_in_GB>
</pre>

Resizing the disk of <code>fast-vm</code> imported Image.
<pre>
# fast-vm resize_image <Image_name> <New_Image_disk_size_in_GB>
</pre>

<p><b>WARNING: </b> <code>fast-vm</code> will resize the disk regardless of
the position of data on it which means that you can loose data if they are not
within new disk size.</p>

<p>If the Image disk size is changed the VMs newly created from it will have
this new size. Old VMs will be unaffected by the Image disk size change.</p>

<h2 id='advanced_operation'>4. Advanced operations</h2>
<p>This part of guide covers some advanced use cases for <code>fast-vm</code>.
Note that this is not exhaustive list of all possibilities and in general as
long as you don't change the naming of VMs you can editing anything that
libvirt allows to customize your VMs.</p>

<h3 id='using_virt-manager'>4.1. Using virt-manager to manage and access
<code>fast-vm</code> VMs</h3>
<p>GUI application 'virt-manager' can be used to connect to <code>fast-vm
server</code>,access VMs and edit them. Further <code>virt-manager</code>
allows you to access serial and graphical console of VMs, create custom networks,
change VM hardware and much more.</p>

<p>When <code>fast-vm server</code> is the same as machine from which you want
to connect there is no special configuration needed in most of cases. If you
cannot see the VMs created by <code>fast-vm</code> then check if you are
connecting to local libvirt URI <code>qemu:///system</code>.</p>

<p>When <code>fast-vm server</code> is remote machine then ensure you have a
SSH access to user on that machine that can use <code>fast-vm</code>. Once you
have this one then you can create connection to this server in
<code>virt-manager</code> following way.</p>
<ol>
<li>From top menu select <code>File -&gt; Add Connection ...</code></li>
<li>In window that opens use following values:
  <ul>
  <li><b>Hypervisor: </b> <code>QEMU/KVM</code></li>
  <li>check the checkbox <b>Connect to remote host</b></li>
  <li><b>Method: </b> <code>SSH</code></li>
  <li><b>Username: </b> <code>&lt;your SSH user for remote server&gt;</code></li>
  <li><b>Hostname: </b> <code>&lt; password for this SSH user&gt;</code></li>
  <li>(optionaly) check the checkbox <b>Autoconnect</b></li>
  </ul>
</li>
<li>Click on <b>Connect</b> button</li>
<li>Access VMs same way as with normal <code>virt-manager</code></li>
</ol>

<p><b>WARNING:</b> By default access via 'virt-manager' is unrestricted and you may use
nearly any feature of libvirt provided on <code>fast-vm server</code>. This is provided for
flexibility but doing intentionally bad changes can impact the whole <code>fast-vm
server</code> so think before making any changes.</p>

<p>Other features and limitations using <code>virt-manager</code></p>
<ul>
<li><code>virt-manager</code> doesn't provide ability to create VMs same way as
<code>fast-vm</code> does.</li>
<li>VM names are shown in format <code> &lt;VM_number&gt; &lt;VM note
containing VM owner&gt;</code></li>
<li>When upgrading from older version of fast-vm some VMs might not have
populated the names correctly which can be fixed by assigning them notes from
<code>fast-vm</code></li>
<li>VM visible names are not propagated to <code>fast-vm server</code> and are
always overwritten by <code>fast-vm edit_note</code> command.</li>
</ul>

<h3 id='using_virsh'>4.2. Using <code>virsh</code> to access and manage
<code>fast-vm</code> VMs</h3>
<p>To use <code>virsh</code> with fast-vm you would have to specify a special
connection string to let know it where the <code>fast-vm server</code> is.</p>

<p>For local <code>fast-vm server</code> you can use the command below</p>
<pre># virsh --connect qemu:///system &lt;virsh_command&gt;</pre>

<p>For remote <code>fast-vm server</code> you can use the command below</p>
<pre># virsh --connect qemu+ssh://user@remote_system/system &lt;virsh_command&gt;</pre>

<p>Same limitation as for <code>virt-manager</code> applies here.</p>

<h3 id='creating_custom_images'>4.3. Creating custom Images for
<code>fast-vm</code></h3>
<p><code>fast-vm</code> is made the way that it provides support for creating
your own Images for use and sharing with others and aims at making this one of
its main features. Before <code>fast-vm-1.2</code> it was possible to create
only Images with disk size of 10GB. From <code>fast-vm-1.2</code> you are able to
specify custom size of Image in GB and to resize any existing Image.</p>

<p>The process of creating custom Image can be summarized into following steps
which are described more in detail in man page (<code>man fast-vm</code>)
section 'CREATING CUSTOM IMAGES'.</p>
<ol>
<li>Creating libvirt XML for future VMs</li>
<li>Importing empty image and giving it name to start with.</li>
<li>Creating base VM that can be used for accessing directly the empty Image.</li>
<li>Export of Image into archive for sharing.</li>
<li>(optional) Creation of scripts that are run on VM creation/deletion.</li>
</ol>

<h2 id='architecture'>5. Detailed <code>fast-vm</code> architecture</h2>
<p>Below you will find some more technical aspects of fast-vm that are aimed at
providing information for those who would like to interact with
<code>fast-vm</code> on low level or tighten up its security aspects.
Author believes that for example access to libvirt could be configured using
rules from policykit and would gladly accept any contribution in this area if
someone is interested</p>

<h3 id='security_information'>5.1. Security information</h3>
<p><code>fast-vm</code> is using following commands from virsh (libvirt):</p>
<ul>
<li>list - listing the VMs under <code>fast-vm</code> control</li>
<li>destroy - forcefully shutdown VMs</li>
<li>shutdown - gracefully shutdown VMs</li>
<li>start - start VMs</li>
<li>console - provide access to serial console of VMs</li>
<li>define, dumpxml - define new VMs and get their basic data</li>
<li>net-update - create static DHCP leases for VMs</li>
<li>desc - update VM notes in libvirt definition</li>
<li>undefine - delete VMs</li>
<li>net-info, net-define, net-autostart, net-start, net-dumpxml - used by
<code>configure-fast-vm</code> script for initial configuration, not needed
during normal operations</li>
</ul>

<p>Further following actions requires giving user the root priviliges using
sudo. All of these privileges are checked within scripts to match the
configuration so the access is limited to <code>fast-vm</code> things only.</p>
<ul>
<li>lvcreate - creation of LVs for Images and VM disks</li>
<li>lvremove - removal of LVs for Images and VM disks</li>
<li>chgrp - allow access to LVs created by <code>fast-vm</code> to group of
users so they can modify it without root privileges</li>
<li>dhcp_release - sending DHCP release packet to libvirt so the static DHCP
lease can be cleared once the VM is undefined</li>
<li>lvs - get information about disk sizes and utilization</li>
<li>lvresize - resize of LVs for Images and VM disks</li>
</ul>

<h2 id='fast-vm-server_documentation'>6. fast-vm-server documentation</h2>
<p>This part of documentation describes best practices on how to use
<code>fast-vm</code> in mutli user environment and how to deploy <code>fast-vm</code>
in automated and scalable way.</p>

<h3 id='fast-vm-server_automated_fast-vm_deployment_overview'>6.1.
<code>fast-vm-server</code>: automated <code>fast-vm</code> deployment overview</h3>
<p><a
href="https://galaxy.ansible.com/OndrejHome/fast-vm-server/"><code>fast-vm-server</code>
ansible role</a> provides a solution how to deploy <code>fast-vm</code> in
automated (unattended) way and also how to deploy it on larger amount of
machines. This role deals only with following things:</p>
<ul>
<li><code>fast-vm</code> installation and configuration</li>
<li>installation and configuration of additional features that can be used
with <code>fast-vm</code> such as</li>
<li><ul>
  <li><code>fence_virtd</code> to allow use with High-Availability clusters
  that needs to be able to reboot VMs for proper operation</li>
  <li>installation of custom version of <code>qemu-kvm</code> and
  <code>seabios-bin</code> that provides support for LSI and MegaRAID SAS
  controllets that are not available in packages from CentOS/RHEL</li>
  <li>OVMF UEFI firmware for use with UEFI fast-vm VMs</li>
</ul></li>
</ul>
<p><code>fast-vm-server</code> ansible role doesn't deal with setting up user
authentication to system nor for importing the <code>fast-vm</code> images
into this new system. For importing images there is ongoing work to provide
ansible role that will be dealing only with that.</p>

<h3 id='fast-vm-server_installation_example'>6.2. <code>fast-vm-server</code>
installation example</h3>
<p>All possibilities configuration options for the <code>fast-vm-server</code>
role can be found in the <a href="https://github.com/OndrejHome/ansible.fast-vm-server/blob/master/README.md">README</a> of the role.
By default all features are enables and only minimum of configuration options
needs to be changed to get from minimal system to system with functional
<code>fast-vm</code>. The single options that would need to be customized on
most of the systems is <b>fastvm_vg</b>VG that will contain
<code>fast-vm</code> thin LV pool. Rest of options can be left in defaults or
tweaked as needed.</p>

<p>Example playbook with default installation containing all features and 50GB
thinpool LV placed on VG <code>my_vg</code> will look like below. (there must
be at least 50GB of free space on <code>my_vg</code> VG or the size can be
changed using option <code>fastvm_lv_size</code>)</p>

Example of <code>install-fast-vm-server.yml</code>:
<pre>
---
- hosts: servers
  remote_user: root
  roles:
    - { role: 'OndrejHome.fast-vm-server', fastvm_vg: 'my_vg' }
</pre>

Example of <code>fast-vm-server.hosts</code>:
<pre>
[servers]
192.168.XX.XX
</pre>

To run the installation with above examples you can use command below:
<pre>
# ansible-playbook -i fast-vm-server.hosts install-fast-vm-server.yml
</pre>
