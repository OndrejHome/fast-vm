.TH FAST-VM 8 "fast-vm 1.1 (2017-06-04)" "fast-vm" "fast-vm" \" -*- nroff -*-
.SH NAME
fast-vm \(em script for defining VMs from images provided in thin LVM pool
.SH SYNOPSIS
.B fast-vm
.RB <action>
.RB <options>

.B fast-vm
.BR import_image
.IR ImageName
.RB < empty
.RI | PathToImage >
.IR PathToLibvirtXML
.RI [ PathToHacksFile ]
.RI [ PathToDeleteHacksFile ]

.B fast-vm
.BR import_custom_image
.IR ImageSizeInGiB
.IR ImageName
.RB < empty
.RI | PathToImage >
.IR PathToLibvirtXML
.RI [ PathToHacksFile ]
.RI [ PathToDeleteHacksFile ]

.B fast-vm
.BR export_image
.IR ImageName
.RB < xz | gz >

.B fast-vm
.BR remove_image
.IR ImageName

.B fast-vm
.BR resize_image
.IR ImageName
.IR NewImageSizeInGiB

.B fast-vm
.BR import_profile
.IR ProfileName
.IR ImageName
.IR PathToLibvirtXML 
.RI [ PathToHacksFile ]
.RI [ PathToDeleteHacksFile ]

.B fast-vm
.BR remove_profile
.IR ProfileName

.B fast-vm
.BR list_images
.RB [ short ]

.B fast-vm
.BR list_profiles
.RB [ short ]

.B fast-vm
.B create 
.RI < ImageName | ProfileName >
.RB < base 
.RI | VmNumber >
.RI [ PathToLibvirtXML ]
.RI [ PathToHacksFile ]

.B fast-vm
.B info
.I VmNumber

.B fast-vm
.B delete
.I VmNumber
.RI [ PathToDeleteHacksFile ]

.B fast-vm
.B edit_note
.I VmNumber
.RI [ NoteText ]

.B fast-vm
.B resize
.I VmNumber
.I NewSizeInGiB

.B fast-vm
.B list
.RB [ all | active | inactive
.RB [ short ]]

.B fast-vm
.BI "start " VmNumber
.RB [ console | ssh 
.RI [ /path/to/custom/script ]]

.B fast-vm
.BI "stop " VmNumber
.RB [ graceful ]

.B fast-vm
.BI "console " VmNumber

.B fast-vm
.BI "ssh " VmNumber
.RI [ /path/to/custom/script ]

.SH DESCRIPTION
fast-vm is provides command-line interface to create virtual machines (VMs) in 
libvirt based on imported disks in LVM and XML templates.

Templates of VM disk drives are stored in LVM thinpool LV for space efficiency.
Templates for VM are just libvirt XMLs with few macros from fast-vm.
When creating a VM, fast-vm will create new writable LVM snapshot of disk drive, 
define libvirt VM for it and make a static DHCP reservation for libvirt network 
on which VM will be.
Optionally fast-vm allows to do some customization of disk drive of new machine
before starting VM using the 'hack files'.

.RB "To start using fast-vm you need to configure it first using command " configure-fast-vm 
.RB "and add users that will fast-vm into " libvirt " system group.
Configuration command will create thinpool LV and libvirt network for you or you can use
existing ones.

Primary use case of fast-vm is creation of scratch VMs on single local machine.

.SH OPTIONS

.TP
.B ImageName
.RB "Name of image imported in the fast-vm. It should contain only alpha-numerical characters. " "ImageName"
is part of the LV name and libvirt machine name.

.TP 
.B PathToImage
.BI "PathToImage " /path/to/image.{gz,xz}
.br
.BI "PathToImage " http://url/to/image.{gz,xz}
.sp
Local path or http/https URL to image file in GZIP or XZ format. From fast-vm-1.2 if the filename of image matches regular
expression "[0-9]+g__" then the number before 'g' is used as the image size that will be imported (this can be overriden by
.RB "using the " "import_custom_image" " action)."

.TP
.B PathToLibvirtXML
.BI "PathToLibvirtXML " /path/to/libvirt.xml
.br
.BI "PathToLibvirtXML " htto://url/to/libvirt.xml
.sp
Local path or http/https URL to libvirt VM XML template. Check the
.B TEMPLATE MACROS
for list of supported macros.

.TP 
.B PathToHacksFile
.BI "PathToHacksFile " /path/to/hacks.sh
.br
.BI "PathToHacksFile " http://url/to/hacks.sh
.sp
Local path or http/https URL to shell script which will be executed after creation of the VM and allows
to access the disk drive of the VM before first running it. 

.TP
.B PathToDeleteHacksFile
.BI "PathToDeleteHacksFile " /path/to/delete-hacks.sh
.br
.BI "PathToDeleteHacksFile " http://url/to/delete-hacks.sh
.sp
Local path or http/https URL to shell script which will be executed during VM delete process as last step
before the VM is undefined from the libvirt.

.TP
.B VmNumber
Number identifying the VM. Currently limited to range 20-220 to allow to be used as last octet of the IP address and leave some space static addresses.

.TP
.I /path/to/custom/script
Local path to script which will be executed as soon as the VM is started and reachable by SSH via its IP address assigned by DHCP.

.SH TEMPLATE MACROS
In the libvirt XML and hack files you variables from 
.BR fast-vm.conf (5)
and another special macros below.

.TP
.B IMAGE_NAME
.RI "Contains value of " ImageName " ."

.TP
.B VM_NUMBER
.RI "Contains value of " VmNumber " ."

.TP
.B VM_NAME
Name of the VM composed from 
.BR "VM_PREFIX IMAGE_NAME VM_NUMBER" .

.TP
.B VM_MAC
.br
MAC address assigned to VM.

.SH CREATING CUSTOM IMAGES
Currently fast-vm expects that all images are 10GB in size (this can change in future).
Below is recommended procedure for creating your custom images.
.TP
.B 1. Create libvirt VM XML template
If you are unsure about the template get some inspiration in the fast-vm-public-images repository and feel free to reuse the template
files from there. You can change template later to suit more your needs. Here are some guidelines for creating a good libvirt XML:
.nf
.RB "\(bu Use " "TEMPLATE MACROS" " to describe paths and names. Avoid hardcoding path to single drive to prevenc concurrent access to it."
\(bu Remove the exact hardware addresses where possible to let the destination libvirt decide where the devices should be assigned.
.fi

.TP
.B 2. Name your custom image and import "empty image" witht the libvirt XML
The custom image in example will be named 'cool_image' and libvirt XML file wil have name cool_image.xml

.B fast-vm import_image cool_image empty cool_image.xml

.TP
.B 3. Create base VM and prepare your custom image
First create the base VM which will use the empty drive that you have imported.

.B fast-vm create cool_image base

Now you will have a VM with empty disk drive and you can install any system you want to become your custom image.
To make image as small as possible try to first remove unnecesary things from the VM such as cache files, logs. If the OS supports it,
try to send TRIM (ATA devices) or UNMAP (SCSI devices) so the storage can mark free space as free. You can try command
.BR fstrim .

.TP
.B 4. Export image in compressed form
When you have done all modification to your image export it to GZ or XZ compressed file using one of the commands below.

.B fast-vm export_image cool_image xz
.br
.B fast-vm export_image cool_image gz

TIP: To test how the fast-vm VM would be created from this image, simply create it based on your custom image

.B fast-vm create cool_image VmNumber

.TP
.B 5. (optional) Creating hack file
Hack files allows you to change some thing in the image at the time when new fast-vm VM is created and when you know for example the VmNumber.
This is used in fast-vm-public-images to setup the hostname of the machine to match the fast-vm VM_NAME and also to alter the MAC address to match
the one that got assigned by libvirt to new VM. fast-vm-public-images hack files are also doing some changes on the filesystem before the VM
is run to setup serial console or SSH keys. Check those hack files for inspiration on what is possible. Note that hack files are run in context of
user running the fast-vm command and they usually don't have root permissions (you can still use sudo).

.SH CUSTOMIZING IMPORTED IMAGE
You can further customize the disk image imported into fast-vm thinpool. This is practical if you are for example importing some systems that requires
registration or some other repetitive task that is hard to put into hacks file. To begin customizing imported image create the 'base' VM using command below.

.BI "fast-vm create " ImageName " base"

Above command will define VM which will be able to directly alter the imported disk image. The VM will be created using default libvirt XML and fast-vm will
apply hacks file on it. However as the 'base' is not a number, the VM will not be assigned the static DHCP lease by libvirt so it might be needed to connect
to VM by other means that through network to figure out its IP address.

It is save to alter imported image after you have created fast-vm VMs that are based on it. The changes you do to the imported image will be present only
in the newly created VMs. It's strongly discouraged to create VMs based on imported image when the base VM is running.

.SH UEFI SUPPORT (from fast-vm-1.0)
To use virtual machines with UEFI you will need a UEFI firmware for qemu which is most probably distributed separately from qemu.
When creating the custom image you will have to specify location of UEFI firmware and provide the location of UEFI variable files in
.RI " " "/etc/libvirt/qemu.conf" " file so the libvirt can automaticaly take care of UEFI vars creation and deletion."

.SH IMAGE PROFILES (from fast-vm-1.1)
Profiles simplyfies the use of alternative libvirt XML files and hack files. Profile defines the set of alternative libvirt XML, hack files under one
profile name that can be used as imageName when creating the new VM. If VM was created using profile this will be indicated in the list output of machines.

.SH EXAMPLES
Import local image into fast-vm
.sp
.BI "fast-vm import_image " "6.7 /tmp/centosl6.7.img.gz /tmp/centos-6.3\-7.2.xml /tmp/centos\-7\-hacks.sh"

Create VM from '6.7' image with number 42
.sp
.BI "fast-vm create " "6.7 42"

Start VM number 42 and connect to it's serial console
.sp
.BI "fast-vm start " "42 console"

Start VM number 42 connect to it via SSH as root when SSH to machine is ready
.sp
.BI "fast-vm start " "42 ssh"

Create machine with custom definition and hack file. Start it and after it's SSH connection is ready execute custom script 'test.sh'.
.sp
.BI "fast-vm create " "6.7 42 /tmp/custom\-libvirt.xml /tmp/custom\-hacks.sh"
&& 
.BI "fast-vm start " "42 ssh /tmp/test.sh"

.RB "Assign text note to VM. If note text is not provided, default editor from " "$EDITOR" " is launched."
.sp
.BI "fast-vm edit_note " "42 'this is testing machine'"

.RB "Define new profile " "small-6.7" " based on image " "6.7" " with custom libvirt XML and hack files and create machine " "41" " using new profile"
.sp
.BI "fast-vm import_profile " "small-6.7 6.7 /tmp/alternative\-libvirt.xml /tmp/custom\-create\-hacks.sh /tmp/custom\-delete\-hacks.sh"
.br
.BI "fast-vm create " "small-6.7 41"

.SH SEE ALSO
.BR fast-vm.conf (5),
.BR configure-fast-vm (8)
